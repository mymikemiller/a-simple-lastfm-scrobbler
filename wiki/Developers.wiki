#summary How other applications can scrobble music through Simple Last.fm Scrobbler
#labels Phase-Implementation

= Introduction =

Any application can easily scrobble their music through Simple Last.fm Scrobbler (SLS). It is just to send certain broadcasts with the appropriate track information, and SLS will do the all the account management, network requests and error-handling etc.

You just have to implement the behavior below, then send an email to [mailto:simple.lfm.scrobbler@gmail.com simple.lfm.scrobbler@gmail.com] and tell me about it. I'll then quickly implement a new listener in SLS, which is done in less than a day.

If you have any questions about this API, or suggestions on how to improve it, please email me.

= Details =


The broadcast action is:

|| PLAYSTATECHANGED || "com.example.musicapp.notify.playstatechanged" || Intent for SLS to listen for ||

which must contain one of these states:

|| State || Integer value || What it means ||
|| START || 0 || A track has started playing ||
|| RESUME || 1 || Playback has been paused for a/the track ||
|| PAUSE || 2 || Playback has been resumed for a/the track ||
|| COMPLETE || 3 || A/The track has finished playing ||

Replace "com.example.musicapp" with your app's package name.

It is not necessary to broadcast with state set to COMPLETE for a track to scrobble; if a new track starts playing and START is broadcast, previously broadcasted tracks will scrobble automatically.

If you loop the same track, you have to send a COMPLETE for proper scrobbling.

The possible fields for the broadcast intent (to be put in it's extras bundle) are:

|| Name || Type || Required || Content ||
|| *state* || int || Yes || One of the states above ||
|| *artist* || String || Yes || The artist name || 
|| *album* || String || Yes || The album name ||
|| *track* || String || Yes || The track name ||
|| *duration* || int || Yes || The duration of the track (in seconds) ||
|| tracknumber || int || No || Track number on album ||
|| mb-trackid || String || No || A TrackID from [http://musicbrainz.org/doc/TrackID MusicBrainz] ||
|| source || String || No || How the user listens to the music - see table below. Default is "P". ||

Table of source values:
|| Value || How the track was chosen ||
|| "P" || Chosen by the user (the most common value, unless you have a reason for choosing otherwise, use this).  ||
|| "R" || Non-personalised broadcast (e.g. Shoutcast, BBC Radio 1). ||
|| "E" || Personalised recommendation except Last.fm (e.g. Pandora, Launchcast). ||
|| "U" || Source unknown. ||

= Examples =

This sends a broadcast that Chris Cornell's song "You Know My Name" has started playing, and will scrobble any previously playing tracks:

{{{
Intent bCast = new Intent(PLAYSTATECHANGED);
bCast.putExtra("state", START);
bCast.putExtra("artist", "Chris Cornell");
bCast.putExtra("album", "Casino Royale");
bCast.putExtra("track", "You Know My Name");
bCast.putExtra("duration", 244);
sendBroadcast(bCast);
}}}

And this says that James Marster's song "Looking At You" has finished playing and should be scrobbled: 

{{{
Intent bCast = new Intent(PLAYSTATE);
bCast.putExtra("state", COMPLETE);
bCast.putExtra("artist", "James Marster");
bCast.putExtra("album", "Like A Waterfall");
bCast.putExtra("track", "Looking At You");
bCast.putExtra("duration", 175);
sendBroadcast(bCast);
}}}

= Custom Broadcasts =

If you already broadcast your own intents, tell me about them and I'll see if I can work them into SLS. 