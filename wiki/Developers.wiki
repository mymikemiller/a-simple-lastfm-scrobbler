#summary How other applications can scrobble music through Simple Last.fm Scrobbler
#labels Phase-Implementation,Featured

<wiki:toc max_depth="3" />

= Introduction =

Any application can easily scrobble their music through Simple Last.fm Scrobbler (SLS). It is just to send certain broadcasts with the appropriate track information, and SLS will do the all the account management, network requests and error-handling etc.

You just have to implement the behavior below, and it should just work. *This version of the API has not been implemented as of version 1.2.1. It will be available in a future release.

I'd appreciate it if you'd send an email to [mailto:simple.lfm.scrobbler@gmail.com simple.lfm.scrobbler@gmail.com] and tell me about any apps using this API. That way I can add them to the list of supported apps. 

If you have any questions about this API, or suggestions on how to improve it, please just email me.

= Details =

The broadcast action is: `com.adam.aslfms.notify.playstatechanged`.

The intent your app broadcast must contain one of these states:

|| State || Integer value || What it means ||
|| START || 0 || A track has started playing ||
|| RESUME || 1 || Playback has been paused for a/the track ||
|| PAUSE || 2 || Playback has been resumed for a/the track ||
|| COMPLETE || 3 || A/The track has finished playing ||

The possible fields for the intent (to be put in it's extras bundle) are:

|| Name || Type || Required || Content ||
|| *app-name* || *String* || *Yes* || *The name of the music app* ||
|| *app-package* || *String* || *Yes* || *The package of the music app* ||
|| *state* || *int* || *Yes* || *One of the states above* ||
|| *artist* || *String* || *Yes* || *The artist name* || 
|| album || String || No || The album name. *Strongly recommended* ||
|| *track* || *String* || *Yes* || *The track name* ||
|| *duration* || *int* || *Yes* || *The duration of the track (in seconds)* ||
|| track-number || int || No || Track number on album ||
|| mbid || String || No || A Track-ID from [http://musicbrainz.org/doc/TrackID MusicBrainz] ||
|| source || String || No || How the user listens to the music - see table below. Default is "P" ||

Table of source values:
|| Value || How the track was chosen ||
|| "P" || Chosen by the user (the most common value, unless you have a reason for choosing otherwise, use this).  ||
|| "R" || Non-personalised broadcast (e.g. Shoutcast, BBC Radio 1). ||
|| "E" || Personalised recommendation except Last.fm (e.g. Pandora, Launchcast). ||
|| "U" || Source unknown. ||

These values are taken from the Last.fm [http://www.last.fm/api/submissions#3.2 Submissions Protocol Specifiaction, section 3.2].

= When to send =

You should broadcast an intent with the information above whenever the user starts playing a new track (including when it is the next track in a playlist), resumes a paused track or pauses or stops a already playing track. Sending intents at other times (such as when the user is seeking within a track) is unnecessary, but does no harm.

It is not necessary to broadcast with state set to COMPLETE for a track to scrobble^1^; if a new track starts playing and START is broadcast, previously broadcasted tracks will scrobble automatically.

^1^If you play the same track again directly after it has finished playing (e.g. looping a playlist with one track), you have to send a COMPLETE for proper scrobbling.

= Examples =

This sends a broadcast that Chris Cornell's song "You Know My Name" has started playing, and will scrobble any previously playing tracks:

{{{
Intent bCast = new Intent("com.adam.aslfms.notify.playstatechanged");
bCast.putExtra("state", START);
bCast.putExtra("app-name", "Example App");
bCast.putExtra("app-package", "com.example.exampleapp");
bCast.putExtra("artist", "Chris Cornell");
bCast.putExtra("album", "Casino Royale");
bCast.putExtra("track", "You Know My Name");
bCast.putExtra("duration", 244);
sendBroadcast(bCast);
}}}

And this says that James Marster's song "Looking At You" has finished playing and should be scrobbled: 

{{{
Intent bCast = new Intent("com.adam.aslfms.notify.playstatechanged");
bCast.putExtra("state", COMPLETE);
bCast.putExtra("app-name", "Example App");
bCast.putExtra("app-package", "com.example.exampleapp");
bCast.putExtra("artist", "James Marsters");
bCast.putExtra("album", "Like A Waterfall");
bCast.putExtra("track", "Looking At You");
bCast.putExtra("duration", 175);
sendBroadcast(bCast);
}}}

This might be if you have a radio app, which just started playing a new track:

{{{
Intent bCast = new Intent("com.adam.aslfms.notify.playstatechanged");
bCast.putExtra("state", START);
bCast.putExtra("app-name", "Example App");
bCast.putExtra("app-package", "com.example.exampleapp");
bCast.putExtra("artist", "Yohanna");
bCast.putExtra("album", "Eurovision Song Contest: Moscow 2009 (disc 2)");
bCast.putExtra("track", "Is It True? (Iceland)");
bCast.putExtra("duration", 181);
bCast.putExtra("track-number", 3);
bCast.putExtra("mbid", "ceb9d062-145c-4831-839b-3be53e9d5549");
bCast.putExtra("source", "R");
sendBroadcast(bCast);
}}}

= Custom Broadcasts =

If you already broadcast your own intents, tell me about them and I'll see if I can work them into SLS. 

= Thanks =

A tip of the hat to jjc1138 of Scrobble Droid, his/her documentation is superb.